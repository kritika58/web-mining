Parallel and Distributed computing

I.	Abstract
Image segmentation is the process of dividing an image into multiple parts. It is typically used to identify objects or other relevant information in digital images. There are many ways to perform image segmentation including Thresholding methods, Colour-based segmentation, Transform methods among many others. Alternately edge detection can be used for image segmentation and data extraction in areas such as image processing, computer vision, and machine vision. Image thresholding is a simple, yet effective, way of partitioning an image into a foreground and background. This image analysis technique is a type of image segmentation that isolates objects by converting grayscale images into binary images. Image thresholding is most effective in images with high levels of contrast. Otsu's method, named after Nobuyuki Otsu, is one such implementation of Image Thresholding which involves iterating through all the possible threshold values and calculating a measure of spread for the pixel levels each side of the threshold, i.e. the pixels that either fall in foreground or background. The aim is to find the threshold value where the sum of foreground and background spreads is at its minimum. Edge detection is an image processing technique for finding the boundaries of objects within images. It works by detecting discontinuities in brightness. An image can have horizontal, vertical or diagonal edges. The Sobel operator is used to detect two kinds of edges in an image by making use of a derivative mask, one for the horizontal edges and one for the vertical edges.

II.	Problem statement
The aim of this project is to perform a comparative analysis of serial and parallel implementations of Gaussian Blurring, Otsu thresholding and Sobel edge detection algorithm in both C (using OpenMP) and Python ( using PyMP). Image thresholding is a simple, yet effective, way of partitioning an image into a foreground and background. Image thresholding is most effective in images with high levels of contrast. Otsu's method, named after Nobuyuki Otsu, is one such implementation of Image Thresholding which involves iterating through all the possible threshold values and calculating a measure of spread for the pixel levels each side of the threshold, i.e. the pixels that either fall in foreground or background. Edge detection is an image processing technique for finding the boundaries of objects within images. It works by detecting discontinuities in brightness. An image can have horizontal, vertical or diagonal edges. The Sobel operator is used to detect two kinds of edges in an image by making use of a derivative mask, one for the horizontal edges and one for the vertical edges.lts from both Inorder to obtain better results from the above two algorithms, the images can be de-noised by using the convolution process using a Gaussian mask.





III.	Algorithms which use Image Segmentation
1.	Gaussian Blurring 
In image processing, a Gaussian blur (also known as Gaussian smoothing) is the result of blurring an image by a Gaussian function. It is a widely used effect in graphics software, typically to reduce image noise and reduce detail. Gaussian blurring is a convolution process. Convolution process basically, calculates for each pixel, the new value by adding weighted values of the neighbouring pixels. It is represented mathematically as shown below
 
Here, P is the image matrix, S is the mask or the kernel being applied and R is the resultant matrix 
The kernel typically used for Gaussian Blurring is shown in Fig 1.1
 
This is used as a pre-processing step to segmentation reduce noise in the image to obtain better segmentation results. 

The algorithm for applying convolution operation to an image is shown
2.	Otsu thresholding 

In computer vision and image processing, Otsu's method, named after Nobuyuki Otsu is used to automatically perform clustering-based image thresholding, or, the reduction of a gray-level image to a binary image. The algorithm assumes that the image contains two classes of pixels following bi-modal histogram (foreground pixels and background pixels), it then calculates the optimum threshold separating the two classes so that their combined spread (intra-class variance) is minimal, or equivalently (because the sum of pairwise squared distances is constant), so that their inter-class variance is maximal. 
In Otsu's method we exhaustively search for the threshold that minimizes the intra-class variance (the variance within the class), defined as a weighted sum of variances of the two classes:
 
Weights ?0,1 are the probabilities of the two classes separated by a threshold t and are variances of these two classes. The class probability is ?0,1 (t) is computed from L histograms
 
 
Otsu shows that minimizing the intra-class variance is the same as maximizing inter-class variance which is expressed in terms of class probabilities ? and class means µ. 
while the class mean µ0,1,T(t) is:
 
3.	Sobel Edge Detection 

The Sobel operator, sometimes called the Sobel–Feldman operator or Sobel filter, is used in image processing and computer vision, particularly within edge detection algorithms where it creates an image emphasising edges. It is named after Irwin Sobel and Gary Feldman[3]. It is a discrete differentiation operator, computing an approximation of the gradient of the image intensity function. At each point in the image, the result of the Sobel–Feldman operator is either the corresponding gradient vector or the norm of this vector. The Sobel–Feldman operator is based on convolving the image with a small, separable, and integer-valued filter in the horizontal and vertical directions and is therefore relatively inexpensive in terms of computations. 
The Sobel operator is used to detect two kinds of edges namely, horizontal and vertical edges. The Sobel operator when applied to an image basically uses the convolution process to obtain the edges. 

It works on the principle that a change in the gradient of intensity of pixels almost certainly will be an edge of the image, i.e. the areas where there is a significant change in the intensity of the pixels marks a different object in the image. 

The horizontal edges are identified using the horizontal mask as shown below, where A represents the image matrix
 
The vertical edges are identified using the horizontal mask as shown below, where A represents the image matrix
 
Now, to obtain the final image that combines both horizontal and vertical images, the following equation is applied to the Gx and Gy matrices.
 

	
IV.	Literature Review 

Research Paper	Relevant Extraction
1.	Gaussian Blurring-Deblurring for Improved Image Compression	From this paper, it can be concluded improving  a compression algorithm by pre-processing it with a Gaussian blurring step so as to improve compression performance, and postprocessing it with a Gaussian de-blurring process to reduce the error in the image seems to be a promising idea. However, the double quantisation occurring first at the input of the compression algorithm, next as a necessary step in any lossy compression algorithm, seem to defeat the expected results.
2.	Efficient and Accurate Gaussian Image Filtering Using Running Sums	This paper presents a very efficient and simple scheme for filtering with separable non uniform kernels. In addition the relation between kernel approximation, output error and natural image statistics is realised. Computing an appropriate Gaussian approximation by the proposed filtering scheme is faster than the current state of art methods, while preserving similar accuracy
3.	Gaussian-Based Edge-Detection Methods—A Survey	The Gaussian filter has several desirable features which accounts for its wide use in many image processing applications. However, research clearly demonstrates that edge-detection techniques involving this filter do not give satisfactory results. Nonlinear approaches show significant improvement in edge-detection and localization over linear methods. However, problems of computational speed, convergence, and difficulties associated with multiscale analysis remain. As it currently stands, use of the Gaussian filter requires making compromises when developing algorithms to give the best overall edge-detection performance.
4.	Implementation of image processing algorithms on the parallel platform using MATLAB	This work presents parallel implementation of sequential image processing algorithm i.e. contrast algorithm. Parallel implementation of algorithm was developed using MATLAB threads in order to leverage the parallel processing capability of current processors with multiple cores and we can see that the speed up, efficiency, parallel time that is computed is good. The focus of this implementation was to improve the performance of image processing algorithm and maximum utilization of the multicores. In terms of performance, parallel implementation was about two and a half times faster than the sequential processing. This is a very promising result since it allows the exploitation of the vast processing power of current processors with multiple cores. In the future, the intention is to use the same principle of division of work in tiles to calculate more and more parameters and proposed the ways to utilize resources better.
5.	Parallel Image Processing Techniques, Benefits and Limitations	As we have discussed above that parallel computing is having very important significance in several image processing techniques like edge detection, histogram equalization, noise removal, image registration, image segmentation, feature extraction, different optimization techniques and many more. In the field of medical imaging, it also plays a significant role. In current years a broad variety of approaches have been proposed for parallel image processing having their benefits and limitations. The present review provides the brief introduction of image processing techniques, different tools and techniques of computing parallel image processing with their respective features and limitations as mentioned in Table 1. Parallel Architectures, tools and techniques of parallel image processing is also discussed in this review with their advantages and limitations as in Table 2. It can be used in different applications of image processing on the basis of its appropriateness, performance, computational cost on the basis of time, applicability. As discussed parallel implementation of Image processing find to be great area of interests by different researchers because of its performance, suitability and availability.
6.	Parallel Algorithms for Image Enhancement and Segmentation by Region Growing with an Experimental Study	This paper presents efficient and portable implementations of a useful image enhancement process, the Symmetric Neighborhood Filter (SNF), and an image segmentation technique which makes use of the SNF and a variant of the conventional connected components algorithm which we call S-Connected Components. We use efjicient techniques for distributing and coalescing data as well as efficient combinations of task and data parallelism. The image segmentation algorithm makes use of an eficient connected components algorithm based on a novel approach for parallel merging.
7.	Parallel processing for image and video processing: Issues and challenges	There are a number of open issues related to the applications of parallel processing techniques in image and video processing. The tendency is to require increasingly sophisticated applications, in increasingly small systems. The microprocessors cannot answer simply this double requirement, and their consumption, their volume and their cost are prohibitive for certain applications (videophone on cellular telephone, distributed monitoring, delocalized visual monitoring in robotics, etc). Usually, relatively simple systems, offering performances coarsely comparable with those of the microprocessors, but with an electric consumption and an obstruction compatible with the applications, are required. They will be probably based on pipeline (possibly reconfigurable) operators, or SIMD meshes of small size. For a certain number of particular applications, the computing power of microprocessors is currently too low. It is, as instance, the case of the vision of the autonomous vehicles, but also of the exploitation of the new methods of video compression in real time. For these applications, the programmability aspect is essential and will guide architectures mainly. These are able to adopt MIMD structures, or SIMD processing with massive parallelism, even operators specialized for certain operations.
8.	Parallel Image Processing	The construction of DPP's seems to be today quite feasible due to the new circuit techniques which permit large scale fabrication of integrated circuits at low prices. As the construction expenses become of the same order with the expenses of simulation on DSC's, the argument against such construction, because of economic reasons, is not valid. An additional advantage is the acquisition of know-how related to the construction of such processors which will be reflected in further progress. The number of real-time applications of parallel processing is only limited by the imagination.
9.	Pixel-Parallel Image Processing Techniques and Algorithms	The motivation of the research presented in this thesis is to investigate image processing algorithms utilising various SIMD parallel devices, especially massively parallel Cellular Processor Arrays (CPAs), to accelerate their processing speed. Various SIMD processors with different architectures are reviewed, and their features are analysed. The different types of parallelisms contained in image processing tasks are also analysed, and the methodologies to exploit date-level parallelisms are discussed. The efficiency of the pixel-per-processor architecture used in computer vision scenarios are discussed, as well as its limitations. This thesis concludes that pixel-per-processor architecture can be used in image processing (or computer vision) algorithms which emphasize analysing pixel-level information, to significantly boost the processing speed of these algorithms.
10.	Parallel Implementation of Otsu’s Binarization Approach on GPU	Fast algorithms are important for efficient image processing systems for handling large set of calculations. To speedup the processing, parallel implementation of an algorithm can be done using Graphics Processing Unit (GPU). GPU is general purpose computation hardware; programmability and low cost make it productive. Binarization is widely used technique in the image analysis and recognition applications. In this paper, we investigate the accuracy and performance characteristics of GPUs on well known global binarization Otsu’s approach for Optical Character Recognition systems. The main goal of this research work is to make binarization faster for recognition of a large number of document images on GPU. The algorithm is implemented using Compute Unified Device Architecture (CUDA). Experimental results show that parallel implementation achieved an average speedup of 1.6x over the serial implementation when running on a GPU named GeForce 9500 GT having 32 cores. Otsu’s method is also evaluated using PSNR, F-measure, NRM, and IND evaluation measures.
11.	A Fast 2D Otsu Thresholding Algorithm Based on Improved Histogram	In this paper, we proposed an improved image
segmentation method to overcome the shortcomings of 1D
Otsu and 2D Otsu algorithms. This method utilized the space
characteristics and projector features of 2D histogram to reduce
the threshold searching time. Furthermore, we eliminated the
redundant computation in the 2D Otsu method. Theoretical
analysis and experimental simulation show that the method
greatly enhanced the speed of thresholding and has better noise
immunity for Salt and Pepper Noise.
12.	Parallel Implementation of Local Thresholding in Mitron-C	The paper presents modern development trends in image processing, analysis and recognition systems, based on reconfigurable devices. It indicates that new possibilities arise to create such systems, due to an increased availability of FPGA resources and development of high-level tools for circuit design. The work’s focus was to verify the usefulness of the Mitrion-C language and the Mitrion Virtual Processor environment in image processing operations.
13.	A Review on Otsu Image Segmentation Algorithm	The main image segmentation algorithm has been reviewed and gives some valuable characteristics of image segmentation algorithm. The authors have classified Otsu algorithm as thresholding region based segmentation algorithm. Also the complexity rate of Otsu thresholding algorithm is very high and processing rate is very slow. The segmentation result of Otsu segmentation algorithm is stable or good. By concluding here, in order to improve the performance of the Otsu algorithm, combine it with other algorithm.
14.	Sobel Edge Detection using Parallel Architecture based on FPGA	Sobel edge detection operator is insensitive to noise and the masks of sobel operator is relatively small as compare to the canny edge detection operator thats why soble egde detection operator is used. A parallel architecture of FPGA based Sobel edge detecion operater is presented in this paper. This method reduces the complexity of the design and also reduce the processing time. The future work improvement can be done with Pipeline structure.
15.	Overview and Comparative Analysis of Edge Detection Techniques in Digital Image Processing	This paper surveys the various state of art of Edge detection techniques in digital image processing. All techniques and algorithm have their own advantages and disadvantages. The analysis of various edge detection techniques are done on the basis of certain parameters. Fast processing response is the main requirement in many image processing applications. The operations performed by image processing algorithms can be computationally costly due to their manipulating large amount of data. To make a program execute in real time, data needs to be processed in parallel and often a great deal of optimization needs to be utilized. In future work parallelizing an edge detection algorithms, provides better performance results for image-processing applications.
16.	Parallel Edge Detection using Sobel Algorithm with Contract-time Anytime Algorithm in CUDA	This paper presented a new parallel edge detection method using Sobel and Contract Anytime Algorithm. As a parallel platform we utilize an NVIDIA GTX GPU and 8 Core CPU. For sample test images, we calculate the execution time of proposed CPU-GPU parallel method and conventional CPU based algorithm. In addition, by varying thread and block sizes, we observed the effect of computation time. Experimental results show that the proposed parallel implementation exhibits above 4X speedup over the conventional serial implementation.
17.	Analysis of Parallel Multicore Performance on Sobel Edge Detector	It is certainly evidence that parallel multicore Sobel algorithm improves the performance of the traditional sequential Sobel algorithm by fully utilize the CPU to its utmost potential. Parallel processing performs better than sequential processing in terms of speed but with a trade off with the performance and the efficiency of utilizing the processors individually. However with the increasing amount of data sizes to be process, multicore provides a welcome alternative for fast processing. This research provide a gateway to identify suitable methods to process large data fast. This initial research can invoke the use of multicore in clustering environment. It also provides some knowledge in balancing the utilization of single core and multicore processors in heterogenous cluster environment. This work is not limited to image processing methods only
18.	A Spread Canny Edge Detection Algorithm for Filtering the Historical Inscription Image	In this research paper, Canny Edge Detection and proposed Spread Canny Edge Detection are relatively beneficial for the recovery of significant images from the image databases. From the results indicates that the proposed method offers important concert enhancements in recovery of images. The performance of k-means means in the spread canny edge detection is given as follows: The k-mean clustering affords a qualitatively and minimum error of localization, an intense enhancement in edge detection performance over an existing edge detection method for spotted imagery. The k-mean clustering intended to permit for well-adjusted and fit localized edge strength dimensions in optimistic regions as well as in dark areas. The performance of the k-mean clustering has been demonstrated for edge-detection speckle minimizing anisotropic diffusion.
19.	A review paper on EDGE detection with comparative analysis of different edge detection approaches	Edge detection is basically used for finding Sharpe edges of any image and video, this is used in many applications like in 2D to 3D conversion technique for generation of depth map.It is used in medical image processing like object recognition of the human organs. It is used in automatic driving technique; face detection approach identifies human faces in digital image, in image navigation. In this paper our main target is to reduce the time complexity issue which is already faced by previous existing technique. So here we will design our error tolerant edge detection algorithm by using of Sobel concept & for noise reduction we will use Gaussian 2D smooth filter. 
20.	Multi-Threaded Computation of the Sobel Image Gradient on Intel Multi-Core Processors Using Openmp Library 	After dividing an image into blocks and assigning them to threads, the next step is allocated the threads to physical cores for execution. Actually, the allocation of the threads and their scheduling may be determined completely by either the underlying operating system or the OpenMP runtime. Definitely, the choice of the scheduling strategy affects the performance. Assigning a thread to a specific core is called processor binding. We controlled the thread assignment to the physical core through the so-called processor affinity feature. In Linux, this feature can be enforced through setting the environment variables OMP_PROC_BIND and GOMP_CPU_AFFINITY, see for details. Note that if processor affinity is not specified the assignment of the threads to the cores is done at runtime by the operating system, as we indicate by using the pattern O.S. in the third column of the table. In this scheduling strategy, neither thread binding nor core affinity are specified.
21.	Fast Sobel Edge Detection Using Parallel Pipeline-based Architecture on FPGA	Implementing image processing algorithms on FPGA has recently become more popular since it provides high speed in comparison with software-based approaches. In this paper, we have presented fast pipeline-based architecture for one of the most popular edge detection algorithms called Sobel edge detection. The objective of our work is to present two fast pipeline-based architectures for Sobel edge detection on FPGA benefiting one and two way parallelism. We used Verilog language to implement our designs and we synthesized each one for Cyclone IV FPGA. Experimental results show that our pipeline-based architectures perform edge detection process more than 379 and 751 times faster than software-based approach using MATLAB.
22.	High Performance Canny Edge Detector using Parallel Patterns for Scalability on Modern Multicore Processors	In this paper we have successfully utilized parallel patterns to implement and demonstrate a Scalable High Performance Parallel implementation of Canny Edge Detector. Through a defined structural approach like GCP, we have proved that the parallel implementation of CED is highly optimal for Multicore Processors. The results showed improved CPU usage over wall clock time, and efficient CPU usage per core. The results were obtained for both Multicore processor systems with 4 and 8 CPUs. The results showed effective performance of parallel implementation of CED on both Multicore processor systems hence proving that the parallel implementation of CED is scalable. The only challenge encountered is with regards to power usage which can be drastically high when all cores are utilized. To counter this, we recommend that an asymmetric approach be used for application, which will require longer times of full usage of all cores such as high resolution image and video rendering. In future we aim to further extend our implementation of the parallel CED on many core systems with 32-64 CPUs to test for robustness of the parallel CED.
23.	A time-efficient image processing algorithm for multicore/manycore parallel computing	Traditional methods for processing large images are extremely time intensive. Also, conventional image processing methods do not take advantage of available computing resources such as multicore central processing unit (CPU) and manycore general purpose graphics processing unit (GP-GPU). Studies suggest that applying parallel programming techniques to various image filters should improve the overall performance without compromising the existing resources. Recent studies also suggest that parallel implementation of image processing on compute unified device architecture (CUDA)-accelerated CPU/GPU system has potential to process the image very fast. In this paper, we introduce a CUDA-accelerated image processing method suitable for multicore/manycore systems. Using a bitmap file, we implement image processing and filtering through traditional sequential C and newly introduced parallel CUDA/C programs. A key step of the proposed algorithm is to load the pixel's bytes in a one dimensional array with length equal to matrix width * matrix height * bytes per pixel. This is done to process the image concurrently in parallel. According to experimental results, the proposed CUDA-accelerated parallel image processing algorithm provides benefit with a speedup factor up to 365 for an image with 8,192×8,192 pixels.
24.	Digital image processing using parallel computing based on CUDA technology	The use of parallel computing with the GPU can significantly accelerate the implementation of program. The degree of parallelism and the acceleration is determined by the number of independent computations performed simultaneously. Despite the fact that the study of Nvidia CUDA technology has been presented in the field of digital image processing computer tomography, it can be used for a wide range of other applications. For example, in recent years, this technology has rapidly integrated into the program for conversion of video, data and programs. It means that it can be applicable for professional and at-home use, which indicates that the technology is widespread not only in science or industry. In the future, it is advisable to adapt this software application for sequential processing of a series of images. Taking into consideration the results of the investigation, it is worth transferring all the calculations to the GPU, meanwhile the CPU will provide the preparation of the next image for the procession.
25.	Image Processing Application Using Parallel Computing	Many image processing applications has been developed and still research is happening in this area. GPU acts as a computing coprocessor for the application of image processing so that valuable amount of time is saved. Researchers have leveraged the computing capability of GPU as well as multi-CPU system. The GPU has been used in processing wide variety of image processing applications. Many image processing applications in the field of medical science, satellite imagery have made use of parallel computing capability of GPU. High throughput and relatively low cost are the main advantages of GPU. Most of the modern laptops and desktops have GPU embedded in it. Even there are systems that use multiple GPUs. The invention of GPGPU has brought a wide change in how general problems can be solved with the help of GPU that is intended mainly for graphics. There have been many image processing applications developed with the help of GPU.

V.	Platforms and tools used 
OpenMP
OpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C, C++, and Fortran, on most platforms, processor architectures and operating systems, including Solaris, Linux, OS X, and Windows. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behaviour
PyMP 
This package brings OpenMP-like functionality to Python. It takes the good qualities of OpenMP such as minimal code changes and high efficiency and combines them with the Python Zen of code clarity and ease-of-use. Beaing a recent implementation, does not include all features that are provided by OpenMP, but considering the high use of Python in recent times, it is necessary to explore possibilities of parallelizing codes written in Python. Not only because of its excessive utility, but also because it is slow in comparison to basic languages like c/c++
PyCharm
 PyCharm is an Integrated Development Environment (IDE) used in computer programming, specifically for the Python language. It is developed by the Czech company JetBrains. It provides code analysis, a graphical debugger, an integrated unit tester, integration with version control systems (VCSes), and supports web development with Django.


